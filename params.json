{"name":"Simpleioc-for-objective-c","tagline":"Simple Ioc for Objective-c  from MvvmLight","body":"\r\n**Simple Ioc for Objective-c  from MvvmLight**\r\n\r\n\r\n这是一款移植的Ioc 框架  他诞生于 Microsoft 的MvvmLight 你可以在wiki 中获得mvvm设计模式的相关说明\r\n\r\n结合了Objective-c的特性实现了原有框架的功能 并提供了更多的使用方式\r\n使用SimpleIoc能使开发与维护变的更简单，降低模块之间的藕合度\r\n\r\n\r\n****你可以在 Locator 中管理 接口于实现 并将模块零件化****\r\n\r\n[[SimpleIoc defaultInstance] registerInstance:[SampleUIViewControl class]];\r\n[SimpleIoc defaultInstance] registerInstance:[MainViewModel class]];\r\n[SimpleIoc defaultInstance] registerInstance:[MainViewModel class] createInstanceImmediately:NO key:@\"OtherMainView\"];\r\n[SimpleIoc defaultInstance] registerInstance:@protocol(ITestServiceA) tClassName:[TestServiceA class]];\r\n[SimpleIoc defaultInstance] registerInstance:@protocol(ITestServiceB) tClassName:[TestServiceB class]];\r\n[SimpleIoc defaultInstance] registerInstance:@protocol(ITestServiceC) tClassName:[TestServiceC class]];\r\n\r\n\r\n**从SimpleIoc 中获取构造你想要的模块**\r\nMainViewModel *viewModel = [[SimpleIoc defaultInstance] getInstanceWithArguments:[MainViewModel class] arguments:arguments];\r\n\r\n\r\n**SimpleIoc 会逐一构造你想要的零件 并注入到你想要的地方**\r\n@interface MainViewModel()\r\n@property id<ITestServiceA> a;\r\n@property NSString* myKey;\r\n@end\r\n@implementation MainViewModel\r\n\r\nsimpleIoc_ctorInfoWithSelectorCustomInit(@selector(build:testB:), @selector(init:), @protocol(ITestServiceA))\r\n\r\n-(void) build:(id<ITestServiceA>) a testB:(id<ITestServiceB>)b {\r\n    self.a = a;\r\n}\r\n@end\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}